---
import SiteLayout from "@/layouts/SiteLayout.astro";
import PostGrid from "@/components/blog/PostGrid.astro";
import { defaultLocale, locales, type Locale } from "@/i18n/config";
import { getPostsByType, paginatePostsByType } from "@/lib/blog";
import {
  buildPostTypePath,
  buildPostTypeRelativePath,
  getPostTypeDescription,
  getPostTypeLabel,
  getPostTypePageDescription,
  getPostTypePageTitle,
  isValidPostType,
  type PostType,
} from "@/lib/post-types";
import { buildCanonicalUrl, buildLanguageAlternates } from "@/lib/seo";
import { messagesByLocale } from "@/lib/messages";
import { translate, type MessageDictionary } from "@/i18n/translator";
import { toExplorerPosts } from "@/lib/blog-explorer";
import { notFound } from "@/lib/http";

export function getStaticPaths() {
  const paths: Array<{ params: { type: string; page: string } }> = [];
  for (const type of ["note", "article", "story"] as const) {
    const pagination = paginatePostsByType(defaultLocale, type, 1);
    for (let page = 2; page <= pagination.totalPages; page += 1) {
      paths.push({ params: { type, page: String(page) } });
    }
  }
  return paths;
}

const rawType = Astro.params.type;
const rawPage = Astro.params.page;
const pageNumber = rawPage ? Number.parseInt(rawPage, 10) : NaN;

if (!rawType || !isValidPostType(rawType) || !rawPage || Number.isNaN(pageNumber) || pageNumber < 1) {
  return notFound();
}

const type = rawType as PostType;
const pagination = paginatePostsByType(defaultLocale, type, pageNumber);

if (pagination.totalCount === 0 || pageNumber > pagination.totalPages) {
  return notFound();
}

const allPosts = getPostsByType(defaultLocale, type);
const postsView = toExplorerPosts(pagination.items, defaultLocale);
const label = getPostTypeLabel(defaultLocale, type);
const description = getPostTypeDescription(defaultLocale, type, allPosts.length);
const pageTitle = getPostTypePageTitle(defaultLocale, type, pageNumber);
const pageDescription = getPostTypePageDescription(defaultLocale, type, allPosts.length, pageNumber);
const relativePath = buildPostTypeRelativePath(type);
const canonical = buildCanonicalUrl(defaultLocale, pageNumber === 1 ? relativePath : `${relativePath}page/${pageNumber}/`);
const availableLocales = locales.filter((locale) => {
  const info = paginatePostsByType(locale, type, 1);
  return info.totalPages >= pageNumber && info.totalPages > 1;
});
const languageAlternates =
  availableLocales.length > 0
    ? buildLanguageAlternates(
        availableLocales.reduce<Record<Locale, string>>((acc, locale) => {
          acc[locale] = pageNumber === 1 ? relativePath : `${relativePath}page/${pageNumber}/`;
          return acc;
        }, {} as Record<Locale, string>),
        { locales: availableLocales },
      )
    : undefined;

const messages = messagesByLocale[defaultLocale] as MessageDictionary;
const readMoreRaw = translate(messages, "Blog.readMore");
const readMoreLabel = readMoreRaw === "Blog.readMore" ? "Читати далі" : readMoreRaw;
const previousLabel = translate(messages, "Pagination.previous");
const nextLabel = translate(messages, "Pagination.next");
const pageSummary = translate(messages, "Pagination.pageSummary", {
  page: pageNumber,
  total: pagination.totalPages,
});
---
<SiteLayout
  locale={defaultLocale}
  title={pageTitle}
  description={pageDescription}
  canonical={canonical}
  languageAlternates={languageAlternates}
>
  <main class="relative z-10 flex flex-col gap-10 py-8 sm:py-12">
    <div class="mx-auto w-[92%] max-w-6xl px-4 sm:px-6">
      <section class="flex flex-col gap-4 rounded-[2rem] border border-[#eadfcd]/70 bg-white/70 p-6 text-sm text-[#4b4139] shadow-[0_24px_70px_-40px_rgba(40,30,20,0.4)] sm:p-8">
        <p class="text-xs font-semibold uppercase tracking-[0.3em] text-[#7c6d5d]">{label}</p>
        <h1 class="text-[clamp(1.8rem,4.5vw,2.6rem)] font-semibold leading-tight text-[#2f2b26]">
          {pageTitle}
        </h1>
        <p>{pageDescription}</p>
      </section>
    </div>

    <div class="mx-auto w-[92%] max-w-6xl px-4 sm:px-6">
      <PostGrid
        posts={postsView}
        readMoreLabel={readMoreLabel}
        pagination={{
          currentPage: pageNumber,
          totalPages: pagination.totalPages,
          basePath: buildPostTypePath(defaultLocale, type),
          summary: pageSummary,
          previousLabel,
          nextLabel,
        }}
      />
    </div>
  </main>
</SiteLayout>
