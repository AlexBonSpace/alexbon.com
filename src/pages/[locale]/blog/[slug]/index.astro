---
import SiteLayout from "@/layouts/SiteLayout.astro";
import LicenseBlock from "@/components/blog/LicenseBlock.astro";
import { locales, defaultLocale, type Locale } from "@/i18n/config";
import { contentByLocale } from "@/content";
import {
  getPostBySlug,
  getPostsByLocale,
  getPostTranslations,
  getPostsForTag,
} from "@/lib/blog";
import { getPostTypeLabel, buildPostTypePath } from "@/lib/post-types";
import { buildBreadcrumbJsonLd } from "@/lib/blog";
import { buildCanonicalUrl, buildLanguageAlternates } from "@/lib/seo";
import { formatDate } from "@/lib/datetime";
import { messagesByLocale } from "@/lib/messages";
import { translate, type MessageDictionary } from "@/i18n/translator";
import { notFound } from "@/lib/http";

export function getStaticPaths() {
  const paths: Array<{ params: { locale: string; slug: string } }> = [];
  for (const locale of locales) {
    const posts = getPostsByLocale(locale);
    for (const post of posts) {
      paths.push({
        params: { locale, slug: post.slug },
      });
    }
  }
  return paths;
}

const localeParam = Astro.params.locale?.toLowerCase();
const slugParam = Astro.params.slug;
const resolvedLocale = locales.find((item) => item === localeParam) as Locale | undefined;

if (!resolvedLocale || !slugParam) {
  return notFound();
}

const locale = resolvedLocale;
const post = getPostBySlug(locale, slugParam);

if (!post) {
  return notFound();
}

const { Content } = await post.render();
const siblings = getPostsByLocale(locale);
const currentIndex = siblings.findIndex((item) => item.slug === post.slug);
const previous = currentIndex > 0 ? siblings[currentIndex - 1] : undefined;
const next = currentIndex < siblings.length - 1 ? siblings[currentIndex + 1] : undefined;
const relatedPosts = post.tags.length > 0 ? getPostsForTag(locale, post.tags[0], { original: post }).slice(0, 4) : [];

const translations = getPostTranslations(locale, post.slug);
const relativePaths: Partial<Record<Locale, string>> = { [locale]: `/blog/${post.slug}/` };
for (const [variantLocale, variantPost] of translations) {
  relativePaths[variantLocale] = `/blog/${variantPost.slug}/`;
}

if (!relativePaths[defaultLocale]) {
  const defaultVariant = translations.get(defaultLocale);
  relativePaths[defaultLocale] = defaultVariant ? `/blog/${defaultVariant.slug}/` : `/blog/${post.slug}/`;
}

const availableLocales = Array.from(new Set([locale, ...translations.keys()])) as Locale[];
const languageAlternates =
  availableLocales.length > 0 ? buildLanguageAlternates(relativePaths, { locales: availableLocales }) : undefined;

const canonical = buildCanonicalUrl(locale, `/blog/${post.slug}/`);
const brandName = contentByLocale[locale].brandName;

const openGraph = {
  type: post.type === "article" || post.type === "story" ? "article" : "website",
  title: post.title,
  description: post.description ?? undefined,
  url: canonical,
  site_name: brandName,
  published_time: post.publishedAt,
  modified_time: post.updatedAt ?? post.publishedAt,
};

const twitter = {
  card: "summary_large_image",
  title: post.title,
  description: post.description ?? undefined,
};

const jsonLd = [post.jsonLd, buildBreadcrumbJsonLd(locale, post)];

const messages = messagesByLocale[locale] as MessageDictionary;
const typeLabel = getPostTypeLabel(locale, post.type);
const typeHref = buildPostTypePath(locale, post.type);
const publishedOn = translate(messages, "Post.publishedOn", { date: formatDate(post.publishedDate, locale) });
const neighborsHeading = translate(messages, "Post.neighborsHeading");
const previousLabel = translate(messages, "Post.previous");
const nextLabel = translate(messages, "Post.next");
const firstPostLabel = translate(messages, "Post.firstPost");
const lastPostLabel = translate(messages, "Post.lastPost");
const moreOnTagLabel = post.tags.length > 0 ? translate(messages, "Post.moreOnTag", { tag: post.tags[0] }) : "";
const readMoreRaw = translate(messages, "Blog.readMore");
const readMoreLabel =
  readMoreRaw === "Blog.readMore"
    ? locale === "ru"
      ? "Читать дальше"
      : locale === "en"
        ? "Read more"
        : "Читати далі"
    : readMoreRaw;

const ensureTrailingSlash = (value: string) => (value.endsWith("/") ? value : `${value}/`);
---
<SiteLayout
  locale={locale}
  title={`${post.title} | ${typeLabel} ${brandName}`}
  description={post.description ?? ""}
  canonical={canonical}
  languageAlternates={languageAlternates}
  openGraph={openGraph}
  twitter={twitter}
  jsonLd={jsonLd}
  navigationAlternatePaths={relativePaths}
>
  <main class="relative z-10 flex flex-col gap-10 py-8 sm:py-12">
    <div class="mx-auto w-[92%] max-w-5xl px-4 sm:px-6">
      <article class="section-card-strong flex flex-col gap-10 rounded-[2.5rem] border border-soft p-6 sm:p-10">
        <header class="flex flex-col gap-4">
          <a
            href={ensureTrailingSlash(typeHref)}
            class="badge-soft inline-flex w-fit items-center gap-2 rounded-full px-4 py-1 text-xs font-semibold uppercase tracking-[0.35em] transition-colors hover:bg-[#f2993f]/90 hover:text-white"
          >
            {typeLabel}
          </a>
          <h1 class={`text-balance text-[clamp(2.2rem,6vw,3.4rem)] font-semibold leading-tight text-strong${post.type === "note" ? " sr-only" : ""}`}>
            {post.title}
          </h1>
          <div class="flex flex-wrap gap-3 text-sm text-muted">
            <time datetime={post.publishedAt} class="font-medium">
              {publishedOn}
            </time>
          </div>
          {post.tags.length > 0 && (
            <ul class="flex flex-wrap gap-2 text-xs font-semibold text-muted">
              {post.tags.map((tag) => {
                const tagHref = ensureTrailingSlash(`/${locale}/blog/tag/${encodeURIComponent(tag)}`);
                return (
                  <li>
                    <a
                      href={tagHref}
                      class="tag-chip inline-flex items-center px-3 py-1 transition-colors"
                    >
                      #{tag}
                    </a>
                  </li>
                );
              })}
            </ul>
          )}
        </header>

        <div class="flex flex-col gap-10 lg:flex-row">
          <div class="flex-1">
            <div class="prose prose-article max-w-none text-[clamp(1rem,3vw,1.15rem)] leading-relaxed">
              <Content />
            </div>
          </div>
        </div>

        <LicenseBlock locale={locale} />
      </article>
    </div>

    <div class="mx-auto w-[92%] max-w-5xl px-4 sm:px-6">
      <section class="section-card flex flex-col gap-6 rounded-[2rem] border border-soft p-6 sm:p-8">
        <h2 class="text-[clamp(1.6rem,4vw,2.2rem)] font-semibold leading-tight text-strong">
          {neighborsHeading}
        </h2>
        <div class="flex flex-col gap-2 text-sm text-primary">
          <div class="flex flex-wrap items-center gap-3">
            <span class="font-semibold text-strong">{previousLabel}</span>
            {previous ? (
              <a
                href={ensureTrailingSlash(previous.url)}
                class="badge-soft inline-flex items-center rounded-full px-4 py-2 transition-colors hover:bg-[#f2993f]/90 hover:text-white"
              >
                {previous.title}
              </a>
            ) : (
              <span class="text-disabled">{firstPostLabel}</span>
            )}
          </div>
          <div class="flex flex-wrap items-center gap-3">
            <span class="font-semibold text-strong">{nextLabel}</span>
            {next ? (
              <a
                href={ensureTrailingSlash(next.url)}
                class="badge-soft inline-flex items-center rounded-full px-4 py-2 transition-colors hover:bg-[#f2993f]/90 hover:text-white"
              >
                {next.title}
              </a>
            ) : (
              <span class="text-disabled">{lastPostLabel}</span>
            )}
          </div>
        </div>
      </section>
    </div>

    {relatedPosts.length > 0 && (
      <div class="mx-auto w-[92%] max-w-5xl px-4 sm:px-6">
        <section class="section-card flex flex-col gap-6 rounded-[2rem] border border-soft p-6 sm:p-8">
          <h2 class="text-[clamp(1.5rem,3.8vw,2.1rem)] font-semibold leading-tight text-strong">
            {moreOnTagLabel}
          </h2>
          <div class="grid gap-5 md:grid-cols-2">
            {relatedPosts.map((item) => {
              const itemUrl = ensureTrailingSlash(item.url);
              const itemTypeLabel = getPostTypeLabel(locale, item.type);
              const itemTypeHref = ensureTrailingSlash(buildPostTypePath(locale, item.type));
              const snippet =
                item.cardSnippet?.trim() || item.summary || item.description || item.plainText || "";

              if (item.type === "note") {
                return (
                  <article class="blog-card flex w-full flex-col gap-3 rounded-3xl border border-soft p-5 transition-transform duration-200 hover:-translate-y-0.5 sm:p-6">
                    <div class="flex items-center text-xs font-semibold uppercase tracking-[0.28em] text-muted">
                      <a
                        href={itemTypeHref}
                        class="badge-soft inline-flex items-center px-3 py-1 text-[0.65rem] leading-none transition-colors hover:bg-[#f2993f]/90 hover:text-white"
                      >
                        {itemTypeLabel}
                      </a>
                    </div>
                <h3 class="sr-only">{item.title}</h3>
                <p class="whitespace-pre-line text-[clamp(1.1rem,3.2vw,1.3rem)] leading-relaxed text-strong">
                  {snippet}
                </p>
                <div>
                  <a
                    href={itemUrl}
                    class="button-primary inline-flex items-center gap-2 rounded-full px-4 py-2 text-sm font-semibold transition-transform hover:-translate-y-0.5"
                  >
                    {readMoreLabel}
                    <span aria-hidden>→</span>
                  </a>
                </div>
              </article>
            );
          }

          return (
                <article class="blog-card flex w-full flex-col gap-5 rounded-[2.25rem] border border-soft p-6 transition-transform duration-200 hover:-translate-y-1 sm:p-7">
                  <div class="flex items-center text-xs font-semibold uppercase tracking-[0.28em] text-muted">
                    <a
                      href={itemTypeHref}
                      class="badge-soft inline-flex items-center gap-2 rounded-full px-3 py-1 text-[0.65rem] leading-none transition-colors hover:bg-[#f2993f]/90 hover:text-white"
                    >
                      {itemTypeLabel}
                    </a>
                </div>
                <div class="flex flex-col gap-3">
                  <h3 class="text-balance text-[clamp(1.3rem,4vw,1.85rem)] font-semibold leading-tight text-strong">
                    <a href={itemUrl} class="text-inherit transition-colors hover:text-accent">
                      {item.title}
                    </a>
                  </h3>
                  <p class="whitespace-pre-line text-[clamp(1rem,3vw,1.12rem)] leading-relaxed text-primary">
                    {snippet}
                  </p>
                </div>
                <div>
                  <a
                    href={itemUrl}
                    class="button-primary inline-flex items-center gap-2 rounded-full px-4 py-2 text-sm font-semibold transition-transform hover:-translate-y-0.5"
                  >
                    {readMoreLabel}
                    <span aria-hidden>→</span>
                  </a>
                </div>
              </article>
            );
          })}
          </div>
        </section>
      </div>
    )}
  </main>
</SiteLayout>
