---
import SiteLayout from "@/layouts/SiteLayout.astro";
import PostGrid from "@/components/blog/PostGrid.astro";
import { locales, type Locale } from "@/i18n/config";
import { contentByLocale } from "@/content";
import { getPostsByLocale, paginatePosts } from "@/lib/blog";
import {
  buildBlogCollectionJsonLd,
  buildBlogBreadcrumbJsonLd,
  getBlogIndexMetadata,
} from "@/lib/blog-schema";
import { messagesByLocale } from "@/lib/messages";
import { notFound } from "@/lib/http";
import { translate, type MessageDictionary } from "@/i18n/translator";
import { toExplorerPosts } from "@/lib/blog-explorer";

export function getStaticPaths() {
  return locales.map((locale) => ({
    params: { locale },
  }));
}

const localeParam = Astro.params.locale?.toLowerCase() as Locale | undefined;
if (!localeParam || !locales.includes(localeParam)) {
  return notFound();
}

const locale = localeParam;
const hero = contentByLocale[locale].blog;
const allPosts = getPostsByLocale(locale);
const firstPage = paginatePosts(locale, 1);
const pagePosts = toExplorerPosts(firstPage.items, locale);
const meta = getBlogIndexMetadata(locale);
const jsonLd = [buildBlogCollectionJsonLd(locale, allPosts), buildBlogBreadcrumbJsonLd(locale)];

const messages = messagesByLocale[locale] as MessageDictionary;

const introCopyByLocale: Record<Locale, string> = {
  ua: "Мене звати Алекс Бон. Це простір, щоб побачити себе. Історії, розповіді, окремі рядки, що живуть тут, — лише віддзеркалення.",
  ru: "Меня зовут Алекс Бон. А это пространство, чтобы увидеть себя. Истории, рассказы, отдельные строки, которые живут здесь, — лишь отражения.",
  en: "My name is Alex Bon. This is a space to see yourself. The stories, narratives, and single lines living here are only reflections.",
};
const introCopy = introCopyByLocale[locale];

const readMoreRaw = translate(messages, "Blog.readMore");
const readMoreLabel =
  readMoreRaw === "Blog.readMore"
    ? locale === "ru"
      ? "Читать дальше"
      : locale === "en"
        ? "Read more"
        : "Читати далі"
    : readMoreRaw;

const paginationSummary = translate(messages, "Pagination.pageSummary", {
  page: firstPage.page,
  total: firstPage.totalPages,
});
const previousLabel = translate(messages, "Pagination.previous");
const nextLabel = translate(messages, "Pagination.next");
const prefix = `/${locale}`;
---
<SiteLayout
  locale={locale}
  title={hero.heroTitle}
  description={hero.heroDescription || undefined}
  canonical={meta.canonical}
  languageAlternates={meta.alternates}
  feeds={meta.feeds}
  jsonLd={jsonLd}
>
  <main class="relative z-10 flex flex-col gap-10 py-8 sm:py-12">
    <div class="mx-auto w-[92%] max-w-6xl px-4 sm:px-6">
      <section class="section-card-strong flex flex-col gap-6 rounded-[2.5rem] border border-soft p-6 text-center shadow-card sm:p-10">
        <span class="badge-soft mx-auto inline-flex items-center gap-2 rounded-full px-4 py-1 text-xs font-semibold uppercase tracking-[0.35em] text-muted">
          {hero.badge}
        </span>
        <h1 class="text-balance text-[clamp(2.4rem,6.5vw,3.8rem)] font-semibold leading-tight text-strong">
          {hero.heroTitle}
        </h1>
        {hero.heroDescription ? (
          <p class="mx-auto max-w-3xl text-[clamp(1.05rem,3.2vw,1.3rem)] leading-relaxed text-primary">
            {hero.heroDescription}
          </p>
        ) : null}
        <p class="mx-auto max-w-3xl text-[clamp(1.05rem,3.2vw,1.2rem)] leading-relaxed text-primary/90">
          {introCopy}
        </p>
      </section>
    </div>

    <div class="mx-auto w-[92%] max-w-6xl px-4 sm:px-6">
      <PostGrid
        posts={pagePosts}
        readMoreLabel={readMoreLabel}
        pagination={
          firstPage.totalPages > 1
            ? {
                currentPage: firstPage.page,
                totalPages: firstPage.totalPages,
                basePath: `${prefix}/blog/`,
                summary: paginationSummary,
                previousLabel,
                nextLabel,
              }
            : undefined
        }
      />
    </div>
  </main>
</SiteLayout>
